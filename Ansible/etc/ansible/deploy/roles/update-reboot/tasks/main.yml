 - hosts: all
   tasks:
  
##
## RedHat-based machine
##
    - name: install own version of 'needs-restarting'
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      copy: 
        src: ../files/needs-restarting.py
        dest: /root/needs-restarting.py
        mode: 0700

    - name: Upgrade all packages in RedHat-based machine - Step 1
      when: ansible_distribution == "CentOS" or ansible_distribution == 'Red Hat Enterprise Linux'
      yum:
        name: '*'
        state: latest

    - name: Reboot required (Red Hat) - Step 2
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      command: /root/needs-restarting.py -r
      register: reboot_required
      ignore_errors: True
      changed_when: False

    - name: Reboot required (Red Hat) - Step 3
      when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and reboot_required.rc == 1
      shell: ( /bin/sleep 5 ; shutdown -r now "Reboot triggered by Ansible" ) &
      async: 30
      poll: 0
      ignore_errors: true
      notify:
        - waiting for server to come back after reboot

##
## Debian-based machine
##
    - name: Update APT package manager repositories cache in Debian-based machine - Step 1
      when: ansible_distribution == "Ubuntu"
      become: true
      apt:
        update_cache: yes

    - name: Upgrade installed packages in Debian-based machine - Step 2
      when: ansible_distribution == "Ubuntu"
      become: true
      apt:
        upgrade: dist

    - name: check if a reboot is required in Debian-based machine - Step 3
      when: ansible_distribution == "Ubuntu"
      shell: ( /bin/sleep 5 ; shutdown -r now "Ansible updates triggered" ) & removes=/var/run/reboot-required
      async: 30
      poll: 0
      ignore_errors: true
      notify:
        - waiting for server to come back after reboot

##
## Handlers
##
   handlers:
    - name: Restart server
      command: shutdown -r now "Reboot triggered by Ansible"
      async: 0
      poll: 0
      ignore_errors: true

    - name: waiting for server to come back after reboot
      local_action: wait_for host={{ inventory_hostname }} port=22 state=started delay=10 timeout=120
      become: no

